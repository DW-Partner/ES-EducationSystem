@charset 'UTF-8';

$breakpoints: (
  'phone': 320px,
  'tablet': 768px,
  'desktop': 1024px
) !default;


$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'
) !default;

$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1
) !default;

$im-media-support: true !default;

$im-no-media-breakpoint: 'desktop' !default;

$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

@function log($message) {
  @if feature-exists('at-error') {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}

@mixin log($message) {
  @if log($message) {}
}

@function noop() {}

@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}
  }

  @each $condition in $conditions {
    @if not map-has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      // scss-lint:disable SpaceAroundOperator
      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
          ($prefix == 'min' and $value > $no-media-breakpoint-value) {
        @return false;
      }
    } @else if not index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  $_: log('No operator found in `#{$expression}`.');
}

@function get-expression-dimension($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  $dimension: 'width';

  @if str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}

@function get-expression-prefix($operator) {
  @return if(index(('<', '<='), $operator), 'max', 'min');
}

@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  } @else {
    $value: to-number($value);
  }

  $interval: map-get($unit-intervals, unit($value));

  @if not $interval {
    $_: log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}

@function parse-expression($expression) {
  // If it is part of $media-expressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($media-expressions, $expression) {
    @return map-get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  // Save global configuration
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;

  @content;

  // Restore global configuration
  $breakpoints: $global-breakpoints !global;
  $media-expressions: $global-media-expressions !global;
}

@mixin media($conditions...) {
  // scss-lint:disable SpaceAroundOperator
  @if ($im-media-support and length($conditions) == 0) or
      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  } @else if ($im-media-support and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }
  }
}

$breakpoints: (
    'ip5': 320px,
    'ip6': 375px,
    'ip6Plus': 414px,
    'ipadMini':512px,
    'ipad':768px,
    'pc':1000px
);

$size:100;
$windowWidth:1000;
$UIwidth:750;
@function r($pixel){
    @return $pixel / $size/($UIwidth/$windowWidth) * 1rem;
    // @return $pixel+px;
}
html{
    @include media("<ip5"){
        font-size: 320/$windowWidth*$size+px;
    }
    @include media(">=ip5","<ip6"){
        font-size: 320/$windowWidth*$size+px;
    }
    @include media(">=ip6","<ip6Plus"){
        font-size: 375/$windowWidth*$size+px;
    }
    @include media(">=ip6Plus","<ipadMini"){
        font-size: 414/$windowWidth*$size+px;
    }
    @include media(">=ipadMini","<ipad"){
        font-size: 512/$windowWidth*$size+px;
    }
    @include media(">=ipad","<pc"){
        font-size: 768/$windowWidth*$size+px;
    }
    @include media(">=pc"){
        font-size: 1000/$windowWidth*$size+px;
    }
}
@mixin box-sizing ($sizing:border-box) {
    -webkit-box-sizing:$sizing;     
       -moz-box-sizing:$sizing;
            box-sizing:$sizing;
}

.border-1px {
  position: relative;
  &:after {content: '';position: absolute;top: 0;right: 0;bottom: 0;left: 0;
    transform-origin: 0 0;
    -moz-transform-origin: 0 0;
    -webkit-transform-origin: 0 0;
    transform: scale(1);
    -moz-transform: scale(1);
    -webkit-transform: scale(1);
    pointer-events: none;
  }

  @at-root {
    @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      .border-1px:after {
        right: -100%;
        bottom: -100%;
        transform: scale(0.5);
        -moz-transform: scale(0.5);
        -webkit-transform: scale(0.5);
      }
    }
  @media only screen and (-webkit-min-device-pixel-ratio: 3) {
    .border-1px:after {
      right: -200%;
      bottom: -200%;
      transform: scale(0.3333);
      -moz-transform: scale(0.3333);
      -webkit-transform: scale(0.3333);
    }
  }
}
}

html,body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,form,fieldset,legend,p,table,th,td,iframe,input,figure{margin:0;padding:0;}
header,section,footer{display:block;}
table{border-collapse:collapse;border-spacing:0;table-layout:fixed;}
img{border:0;}
li{list-style:none;}
em,i{font-style:normal;}
a{text-decoration:none; -webkit-tap-highlight-color: rgba(0,0,0,0); }
a:focus{outline:0;}
textarea{resize:none;overflow-x:hidden;overflow-y:auto;outline: none;}
input[type="text"],input[type="button"],input[type="submit"],input[type="tel"]{-webkit-appearance:none;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0);border-radius:0;}
input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0);-webkit-user-modify:read-write-plaintext-only;}
body{font:14px/20px "Microsoft YaHei","Hiragino Sans GB","stheitisclight","sans-serif";word-wrap:break-word;-webkit-overflow-scrolling:touch;
/*overflow-x:hidden;*/
background: #f8f7f7;
color: #393c40;
overflow-y: hidden;
  box-sizing: border-box;
  min-width: 980px;
}
*, *:before, *:after {
  box-sizing: inherit;
}
header, nav, footer,article,section,aside{
	display: block;
}
h1,h2,h3,h4,h5,h6{
	margin: 0;
}
/*初始化样式end*/
.none{
  display: none;
}


input{
 border: 1px solid #E0E3E8;
 box-shadow: none;
 border-radius: 4px;
}
button, input[type=button], .btn, .btn_grey{
  border-radius: 4px;
  background-color: #3580d9;
  box-shadow: none;
  color: #fff;
  font-size: 14px;
  line-height: 14px;
  width: 150px;
  height: 36px;
  padding: 11px 0;
  font-weight: 100;
  display: inline-block;
  text-align: center;
  cursor: pointer;
  &:focus{
    outline: none;
  }
  &.on{
    color: #fff;
    background-color: #4580D3;
  }
  &:hover{
    color: #fff;
    background-color: #2b73c8;
  }
  &:active{
    color: #fff;
    background-color: #2163b1;
  }
}
.btn, .btn_grey{
    i {
        font-size: 20px;
        color: #FFF;
        margin-right: 6px;
      }
}
.btn_grey{
  width: 110px;
  border: 1px solid #ced0da; 
  background: #f4f6f9;
  color: #393C40;
}
select {
 /*Chrome和Firefox里面的边框是不一样的，所以复写了一下*/
 border: solid 1px #CED0D9;
 /*很关键：将默认的select选择框样式清除*/
 appearance: none;
 -moz-appearance: none;
 -webkit-appearance: none;
 /*在选择框的最右侧中间显示小箭头图片*/
 background: url("http://ourjs.github.io/static/2015/arrow.png") no-repeat scroll right center transparent;
 background-position: 117px center;
 background-color: #F3F5F8;
 /*为下拉小箭头留出一点位置，避免被文字覆盖*/
 padding-right: 24px;

 font-size: 14px;
 color: #3A3C40;
 padding-top: 7px;
 padding-bottom: 7px;
 padding-left: 15px;
 width: 140px;
 border-radius: 4px;
}
/*清除ie的默认选择框样式清除，隐藏下拉箭头*/
select::-ms-expand {
 display: none;
}


/*公共列表*/
.flex_2{
  flex: 2 !important;
}
.flex_3{
  flex: 3 !important;
}
.flex_4{
  flex: 4 !important;
}
.pub_list{
  .head{
    height: 50px;
    line-height: 50px;
    display: flex;
    background-color: #fcfcfc;
    span{
      flex: 1;
      text-align: center;
    }

  }
  .body{
    background-color: #fff;
    font-size: 16px;
    li{
      min-height: 90px;
      padding: 30px 0;
      line-height: 30px;
      border-top: 1px solid #eaeaea;
      display: flex;
      .item{
        flex: 1;
        p{
          width: 100%;
          display: table;
          padding: 5px;
          text-align: center;
        }
        span{
          display: table-cell;
          vertical-align: middle;
          word-break: break-all;
        }
      }
      &:hover{
        background-color: #eaeaea;
      };
    }

  }
  .page{
    position: relative;
    top: 63px;
    margin-top: -36px;
    text-align: right;
    line-height: 36px;
    p{
      background: #fff;
      display: inline-block;
      box-shadow: 0px 0px 1px 4px #f6f5f5;
      border-radius: 4px;
    }
    a{
      display: inline-block;
      padding: 0 7px;
      margin: 0 3px;
      color: #CED0DA;
      &:hover,&.on{
        color: #393C40;
      }
/*      &:first-child{
        border-radius: 4px 0 0 4px;
      }
      &:last-child{
        border-radius: 0 4px 4px 0;
      }*/
    }
    .prev, .next{
      width: 0;
      height: 0;
      padding: 0 4px;
      border: 6px solid #fff;
      overflow: hidden;

    }
    .prev{
      margin: 0 5px 0 0;
      border-right: 6px solid #CED0DA;
      &:hover{
        border-right: 6px solid #393C40;
      }
    }
    .next{
      margin: 0 0 0 5px;
      border-left: 6px solid #CED0DA;
      &:hover{
        border-left: 6px solid #393C40;
      }
    }

  }

}



/*公共表单样式*/
.form{
  li{
    padding: 15px 0;
    span{
      color: #707379;
      font-size: 14px;
      line-height: 14px;
      width: 80px;
      height: 36px;
      line-height: 36px;
      display: inline-block;
    }
    input[type=text],input[type=password]{
      color: #212224;
      font-size: 14px;
      line-height: 18px;
      padding: 8px;
      border-radius: 4px;
      width: 60%;
    }
  }
  button{
    margin-top: 40px;
  }
}







/*登录界面主体部分*/
.layout_center{
  min-height: 500px;
  position: relative;
  .content_box{
    width: 362px;
    height: 385px;
    box-shadow: 0px 0px 1px 4px #f6f5f5;
    background: #fff;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%,-50%);
  }
  /*二维码登录*/
  .qrcodeLogin{
    line-height: 18px;
    font-size: 14px;
    img{
      display: block;
      width: 180px;
      height: 180px;
      margin: 90px auto 10px;
    }
    p{
      padding: 0 32px;
    }
    .loginType{
      position: absolute;
      right: 0;
      top: 0;
      width: 83px;
      height: 36px;
      background-image: url(../images/ico_loginType.png);
      background-size: 83px 76px;
      background-position: 0 0; 
    }
  }

  /*密码登录*/
  .passwordLogin, .passwordReset, .verificationCode{
    padding: 30px;
    .loginType{
      position: absolute;
      right: 0;
      top: 0;
      width: 83px;
      height: 36px;
      background-image: url(../images/ico_loginType.png);
      background-size: 83px 76px;
      background-position: 0 -40px; 
    }
    h5{
      font-size: 16px;
      line-height: 18px;
      padding-bottom: 4px;
    }
    p{
      color: #F14949;
      line-height: 14px;
      padding-bottom: 6px;
    }
    li{
      padding: 10px 0;
      input[type=text],input[type=password]{
        padding: 16px 8px;
        width: 100%;
      }
    }
    .btn{
      width: 100%;
      height: 50px;
      padding: 18px 0;
      font-size: 16px;
      margin-top: 10px;
    }
  }



/*重置密码*/
.passwordReset{

}

/*验证码*/
.verificationCode{
  .text_btn{
    input[type=text]{
      width: 200px;
    }
    a{
      width: 90px;
      margin-left: 7px;
      font-size: 14px;
    }
    .disabled{
      background: #c6c9cf;
    }
  }
}


/*登录状态*/
  .loginStatus_success, .loginStatus_error{
      margin: 100px auto 0 auto;
      padding-top: 120px;
      background-image: url(../images/ico_loginStatus.png);
      background-size: 120px 240px;
      background-position: center 0;
      background-repeat: no-repeat;
      p{
        padding: 25px 32px;
        text-align: center;
        background: #fff;
      }
      .btn{
        display: block;
        margin: 0 auto;

      }
  }
  .loginStatus_error{
    background-position: center -120px;
  }
}



/*登录界面底部部分*/
.layout_footer{
  height: 70px;
  line-height: 70px;
  text-align: center;
  font-size: 14px;
  color: #6F737A;
  border-top: 1px solid #eaeaea;
  background: #fff;
}














.top_box{
  min-width: 980px;
  height: 80px;
  background: #fff;
  box-shadow: 0px 0px 2px 1px #eeeded;
  position: relative;
  z-index: 1;
  line-height: 80px;
  font-size: 14px;
  padding: 0 32px;
  img,p{
    float: left;
  }
  img{
    height: 39px;
    margin: 20px 20px 0 0;
  }
  p{
    height: 14px;
    line-height: 14px;
    border-left: 1px solid #3580d9;
    margin-top: 33px;
    padding-left: 20px;
  }
  .user{
    float: right;
  }
  a,.times{
    color: #AAAEB3;
    margin-left: 20px;
  }
  a:hover{
    color: #393C40;
  }
}


.left_nav{
  width: 190px;
  height: calc(100% - 80px);
  min-height: 400px;
  position: absolute;
  left: 0;
  top: 80px;
  overflow: auto;
  background: #3580d9;
  padding: 20px 0;
  li{
    height: 40px;
    line-height: 40px;
    font-size: 14px;
    color: #fff;
    a{
      color: #fff;
      display: block;
      padding-left: 40px;
    }
    &:hover,&.on{
      background: #3372be;
      font-weight: bold;
    }
  }
}


.main_box{
  height: calc(100% - 120px);
  width: calc(100% - 190px);
  min-width: 790px;
  position: absolute;
  left: 190px;
  top: 80px;
  padding: 0 20px;
  margin: 20px 0;
  overflow-y: auto;
  .main{
      box-shadow: 0px 0px 1px 4px #f6f5f5;
      min-height: 360px;
      background: #fff;
  }
}


/*.main{
  position: absolute;
  left: 0;
  top: 80px;
  width: 100%;
  min-width: 980px;
  height: calc(100% - 80px);
  min-height: 400px;
  overflow: auto;
}*/